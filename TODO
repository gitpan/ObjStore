--------------------------------------------------------------------
TODO      DOTODOTODOTODOTODOTODOTODOTODOTODOTODOTODOTODOTO      TODO


If you are interested in contributing, subscribe to the OS/Perl
mailing list.  Send email to majordomo@parallax.co.uk with the
following in the body of your message:
  "subscribe perl-objectstore you@your.company.com"


Optimize for flexibility, then memory performance, then speed.

1. Flexibility
Flexibility is the most important because ObjectStore should be easy
to use and everyone complains that it can't do SQL.  We'll show 'em!

2. Memory Performance
Memory performance is also very important due to the potential size of
databases.  Small memory efficiency improvements in a 5TB database
have an impact.

3. Speed
Speed is pretty good already, compared to a relational database!  Not
that there isn't always room for improvement...


+ IDEAS +

Abort transaction without jumping up the stack!  begin('UPDATE',...)

posh
  factor more!
  autodetect @INC modifications and print help message
  persist command history!
  tkposh ?

ospeek
  style - raw, vanilla, etc...
  -depth switch?
Peeker
  fix comma - $o->comma, then check in $o->nl
  fix for "$at = " prefix ?

optimize
  do autoclassloading upon open

database access control API

renovate thread specific stuff in ObjStore.xs

Threads!

use Error

_Per_segment_data is not free'd when no longer needed


+ VAGUE POSSIBILITIES +

get_database
  factor
  os_server::get_databases() doesn't deal with bless

notifications
  batch notify
  notify should take the string length!
  get_string should return the length!

Split GENERIC into ODI & Splash parts!

OS version as a float?

factor error messages like diagnostics.pm

prune debugging stuff

Improve transaction memory management.  Go back to using doubly-linked
lists to destroy the bridge as soon as possible.

iterating over AVHV keys is broken - cursor is stored in the ossv_bridge
  unmagic the keys hash - make non-lazy?

propagate READONLY to the perl side?

posh
  improve pre/post eval logic
  $at->open('mvcc') ?
  Devel::Symdump->methods when peeking if blessed?
  Multiple sessions per user?  Who cares?
  Call system() when in ufs?  How about rawfs?

cache last lookup to avoid gv_fetchmethod(NOREFS)?

script to insure consistent pod grammer? (get Pod::Parser)

migrate everything to OSPV_Cursor2

move all ospv->sv conversions back into ObjStore/ObjStore.xs

assignment to $SIG{SEGV} should not reset SEGV handler

transaction hooks?

depreciate os_object_cursor?

ObjStore::File.  Support Verity full text indexing?

Seems like there might be memory leaks on the transient side...?  dubious.

install HTML versions of the pod files & gif picture

Make XS code more efficient.  (How?)


+ BIGGISH PROJECTS +

Support for multiple application schemas (expected 1Q98)

Add support for parts of the TimeSeries Object Manager?


+ CORE-PERL WISH LIST +

The TIE interfaces are not as detailed as the built-ins.  I should be
able to hide whatever necessary complexity in the module that
implements the 'tie' so the user doesn't have to know anything
special.  How about lvalues?  How about proper support for nested
structures?
