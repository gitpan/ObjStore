######################################################################
# INPUT/OUTPUT maps
#
# O_*		-> opaque blessed objects
# O_OBJECT	-> link an opaque C or C++ object to a blessed Perl object.
#
######################################################################

TYPEMAP

os_server *		O_OBJECT
os_database *		O_OBJECT
os_database_root *	O_OBJECT
os_database_reference *	O_OBJECT
os_notification *	O_OBJECT
os_segment *		O_OBJECT
os_segment_access *	O_OBJECT
os_object_cursor *	O_OBJECT
OSSVPV *		O_OSSVPV
OSPV_Container *	O_OSSVPV
OSPV_Generic *		O_OSSVPV
OSPV_fatindex2 *	O_OSSVPV
OSPV_odi_dictindex *	O_OSSVPV
OSPV_avarray *		O_OSSVPV
OSPV_hvarray2 *		O_OSSVPV
OSPV_Ref2 *		O_OSSVPV
OSPV_Cursor2 *		O_OSSVPV
OSPV_Ref *		O_OSSVPV
OSPV_Cursor *		O_OSSVPV
osp_bridge *		T_PTRREF
osp_txn *		O_OBJECT

######################################################################
INPUT

O_OBJECT
	if( sv_isobject($arg) && (SvTYPE(SvRV($arg)) == SVt_PVMG) )
		$var = ($type)SvIV((SV*)SvRV( $arg ));
	else{
		croak( \"${Package}::$func_name() -- $var is not a blessed SV reference\" );
	}

O_OSSVPV
	dOSP;
	ossv_bridge * ${var}_bridge = osp->sv_2bridge($arg, 1);
	$var = ($type) ${var}_bridge->ospv();

######################################################################
OUTPUT

# The Perl object is blessed into 'CLASS', which should be a
# char* having the name of the package for the blessing.
O_OBJECT
	sv_setref_pv( $arg, CLASS, (void*)$var );

O_OSSVPV
	croak("not implemented");

